/**
 * File Generated by Sideko (sideko.dev)
 */
import {
  CoreResourceClient,
  CoreClient,
  RequestOptions,
  ApiPromise,
} from "visa_click_to_pay/core";
import { SrcClient } from "visa_click_to_pay/resources/wallet/payments/src";
import * as requests from "visa_click_to_pay/resources/wallet/payments/request-types";
import * as types from "visa_click_to_pay/types";
import qs from "qs";

export class PaymentsClient extends CoreResourceClient {
  // register resources (keep comment for code generation)
  src: SrcClient;

  constructor(client: CoreClient) {
    super(client);

    // init resources (keep comment for code generation)
    this.src = new SrcClient(this._client);
  }

  // register api methods (keep comment for code generation)

  /**
   * no description available
   */
  put(
    request: requests.PutRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.UpdatePaymentInfoResponse1> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "put",
      path: `/wallet/payments/${request.callId}`,
      responseType: "json",
      opts,
    });
  }

  /**
   * no description available
   */
  get(
    request: requests.GetRequest,
    opts?: RequestOptions,
  ): ApiPromise<types.GetPaymentDataResponse1> {
    // send request (keep comment for code generation)
    return this._client.makeRequest({
      method: "get",
      path: `/wallet/payments/${request.callId}`,
      query: [
        qs.stringify({ dataLevel: request.dataLevel }),
        qs.stringify({ encryptionKey: request.encryptionKey }),
        qs.stringify({ externalClientId: request.externalClientId }),
        qs.stringify({ payloadType: request.payloadType }),
        qs.stringify({ tokenCryptogramType: request.tokenCryptogramType }),
      ],
      responseType: "json",
      opts,
    });
  }
}
